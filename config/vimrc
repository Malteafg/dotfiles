set number relativenumber
set tabstop=4
set shiftwidth=4
set expandtab
set smartindent
set incsearch
set nocompatible
set noshowmode
set colorcolumn=81
set spelllang=en_us
set spell
set completeopt=menu,menuone,noselect
filetype plugin indent on
syntax on
set so=12

call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tmsvg/pear-tree'

Plug 'williamboman/nvim-lsp-installer'
Plug 'neovim/nvim-lspconfig'
"Plug 'mfussenegger/nvim-dap'
Plug 'nvim-treesitter/nvim-treesitter'

Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'dcampos/nvim-snippy'
Plug 'dcampos/cmp-snippy'

Plug 'lervag/vimtex'
Plug 'vimwiki/vimwiki'

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'

Plug 'itchyny/lightline.vim'
Plug 'yggdroot/indentline'

Plug 'romgrk/doom-one.vim'
Plug 'morhetz/gruvbox'
Plug 'eddyekofo94/gruvbox-flat.nvim'

call plug#end()

:lua require("nvim-lsp-installer").setup {}

let g:vimwiki_global_ext = 0
let g:vimwiki_list = [{
        \ 'path': '~/files/vimwiki/text/',
        \ 'path_html': '~/files/vimwiki/vimwiki_html/', 
        "\ 'syntax': 'markdown',
        "\ 'ext': '.md',
        \ 'template_path': '~/files/vimwiki/templates/',
        \ 'template_default': 'default'}]
let g:indentLine_concealcursor=""
let g:indentLine_conceallevel=2
autocmd FileType wiki nnoremap <Esc> :VimwikiGoBackLink<CR>

let g:vimtex_view_method = 'zathura'
let g:vimtex_syntax_conceal_disable = 1

nnoremap <SPACE> <Nop>
let mapleader = " "
let maplocalleader = ","
nnoremap Y y$
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:lightline = {'colorscheme': 'one'}

imap <expr> <Tab> snippy#can_expand_or_advance() ? '<Plug>(snippy-expand-or-advance)' : '<Tab>'
imap <expr> <S-Tab> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<S-Tab>'
smap <expr> <Tab> snippy#can_jump(1) ? '<Plug>(snippy-next)' : '<Tab>'
smap <expr> <S-Tab> snippy#can_jump(-1) ? '<Plug>(snippy-previous)' : '<S-Tab>'
xmap <Tab> <Plug>(snippy-cut-text)

lua <<EOF
  -- Setup nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    snippet = {
      -- REQUIRED - you must specify a snippet engine
      expand = function(args)
        -- vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
        -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
        require('snippy').expand_snippet(args.body) -- For `snippy` users.
        -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
      end,
    },
    window = {
      -- completion = cmp.config.window.bordered(),
      -- documentation = cmp.config.window.bordered(),
    },
    mapping = cmp.mapping.preset.insert({
      ['<C-b>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      -- ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.abort(),
      ["<Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        elseif snippy.can_expand_or_advance() then
          snippy.expand_or_advance()
        elseif has_words_before() then
          cmp.complete()
        else
          fallback()
        end
      end, { "i", "s" }),
  
      ["<S-Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif snippy.can_jump(-1) then
          snippy.previous()
        else
          fallback()
        end
      end, { "i", "s" }),
    }),


    sources = cmp.config.sources({
      { name = 'nvim_lsp' },
      -- { name = 'vsnip' }, -- For vsnip users.
      -- { name = 'luasnip' }, -- For luasnip users.
      -- { name = 'ultisnips' }, -- For ultisnips users.
      { name = 'snippy' }, -- For snippy users.
    }, {
      { name = 'buffer' },
    })
  })

  -- Set configuration for specific filetype.
  cmp.setup.filetype('gitcommit', {
    sources = cmp.config.sources({
      { name = 'cmp_git' }, -- You can specify the `cmp_git` source if you were installed it.
    }, {
      { name = 'buffer' },
    })
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    mapping = cmp.mapping.preset.cmdline(),
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  require('lspconfig')['texlab'].setup {
    capabilities = capabilities
  }
EOF


"COLORS
"let g:gruvbox_invert_selection=0
"let g:gruvbox_contrast_dark='hard'
"set bg=dark
set termguicolors
"colorscheme gruvbox
colorscheme gruvbox-flat
let g:gruvbox_flat_style = "dark"
"colorscheme doom-one
hi Normal guibg=NONE ctermbg=NONE guifg=#f5e6d1
hi NormalNC guibg=NONE ctermbg=NONE guifg=#f5e6d1
hi NormalFloat guibg=NONE ctermbg=NONE guifg=#f5e6d1
hi LineNr guibg=NONE ctermbg=NONE
hi Folded guibg=NONE ctermbg=NONE
hi NonText guibg=NONE ctermbg=NONE
hi SpecialKey guibg=NONE ctermbg=NONE
hi VertSplit guibg=NONE ctermbg=NONE
hi SignColumn guibg=NONE ctermbg=NONE
hi EndOfBuffer guibg=NONE ctermbg=NONE
hi CursorLineNr guibg=NONE ctermbg=NONE

"COMMENTING
nmap <C-_> <leader>c<Space>
vmap <C-_> <leader>c<Space>

"PARENTHESIS COMPLETION
let g:pear_tree_smart_openers = 1
let g:pear_tree_smart_closers = 1
let g:pear_tree_smart_backspace = 1

"OPEN LINES
nnoremap <silent> <leader>o 
            \:<C-u>call append(line("."),   repeat([""], v:count1))<CR>
nnoremap <silent> <leader>O 
            \:<C-u>call append(line(".")-1, repeat([""], v:count1))<CR>

"KEEP CENTER WHEN SEARCHING
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z

"SYSTEM CLIPBOARD
nnoremap <leader>y <S-v>"+y
vnoremap <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>p "_dP

"SELECT ALL
nnoremap <leader>a gg<S-v>G

"MOVE TEXT
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
inoremap <C-j> <esc>:m .+1<CR>==
inoremap <C-k> <esc>:m .-2<CR>==
"nnoremap <C-j> :m .+1<CR>==
"nnoremap <C-k> :m .-2<CR>==

"UNDO POINTS
inoremap , ,<C-g>u
inoremap . .<C-g>u
inoremap ! !<C-g>u
inoremap ? ?<C-g>u

"LATEX
autocmd FileType tex inoremap ;sl \begin{frame}<Enter>\frametitle{}<Enter><Enter>(<>)<Enter><Enter>\end{frame}<Enter><Enter>(<>)<Esc>6kf}i

autocmd FileType tex inoremap ;mt \begin{matrix}  \end{matrix}<Esc>Bhi
autocmd FileType tex inoremap ;mp \begin{pmatrix}  \end{pmatrix}<Esc>Bhi
autocmd FileType tex inoremap ;mb \begin{bmatrix}  \end{bmatrix}<Esc>Bhi
autocmd FileType tex inoremap ;mB \begin{Bmatrix}  \end{Bmatrix}<Esc>Bhi
autocmd FileType tex inoremap ;mv \begin{vmatrix}  \end{vmatrix}<Esc>Bhi
autocmd FileType tex inoremap ;mV \begin{Vmatrix}  \end{Vmatrix}<Esc>Bhi

autocmd FileType tex inoremap ;ai \begin{align*}<Enter><Enter>\end{align*}<Enter>(<>)<Esc>2ki<Tab>
autocmd FileType tex inoremap ;an \begin{align}<Enter><Enter>\end{align}<Enter>(<>)<Esc>2ki<Tab>

autocmd FileType tex inoremap ;se \section{}<Enter>(<>)<Esc>k$i
autocmd FileType tex inoremap ;sn \section*{}<Enter>(<>)<Esc>k$i
autocmd FileType tex inoremap ;1se \subsection{}<Enter>(<>)<Esc>k$i
autocmd FileType tex inoremap ;1sn \subsection*{}<Enter>(<>)<Esc>k$i
autocmd FileType tex inoremap ;2se \subsubsection{}<Enter>(<>)<Esc>k$i
autocmd FileType tex inoremap ;2sn \subsubsection*{}<Enter>(<>)<Esc>k$i
autocmd FileType tex inoremap ;3se \subsubsubsection{}<Enter>(<>)<Esc>k$i
autocmd FileType tex inoremap ;3sn \subsubsubsection*{}<Enter>(<>)<Esc>k$i

autocmd FileType tex inoremap ;fr \frac{}{(<>)}(<>)<Esc>10hi

inoremap <C-@> <C-Space>
autocmd FileType tex inoremap <C-Space> <Esc>/(<>)<CR>:noh<CR>cf)
nnoremap <C-@> <C-Space>
autocmd FileType tex nnoremap <C-Space> <Esc>/(<>)<CR>:noh<CR>cf)

"FZF
" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-c': 'split',
  \ 'ctrl-v': 'vsplit' }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

map <c-t> :Files<cr>
map <leader>b :Buffers<cr>
nnoremap <leader>g :Rg<cr>
nnoremap <leader>t :Tags<cr>
nnoremap <leader>m :Marks<cr>

let g:fzf_tags_command = 'ctags -R'

" Border color
let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.7, 'height': 0.7,'yoffset':0.5,'xoffset': 0.5, 'highlight': 'Todo', 'border': 'sharp' } }

let $FZF_DEFAULT_OPTS = '--info=inline'
let $FZF_DEFAULT_COMMAND="rg --files --hidden"

" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

"Get Files
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--info=inline']}), <bang>0)


" Get text in files with Rg
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

" Ripgrep advanced
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)

" Git grep
command! -bang -nargs=* GGrep
  \ call fzf#vim#grep(
  \   'git grep --line-number '.shellescape(<q-args>), 0,
  \   fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

" LSP config (the mappings used in the default file don't quite work right)
nnoremap <silent> gd <cmd>lua vim.lsp.buf.definition()<cr>
nnoremap <silent> gD <cmd>lua vim.lsp.buf.declaration()<cr>
nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<cr>
nnoremap <silent> gi <cmd>lua vim.lsp.buf.implementation()<cr>
nnoremap <silent> K <cmd>lua vim.lsp.buf.hover()<cr>
nnoremap <silent> <c-k> <cmd>lua vim.lsp.buf.signature_help()<cr>
nnoremap <silent> <c-p> <cmd>lua vim.lsp.diagnostic.goto_prev()<cr>
nnoremap <silent> <c-n> <cmd>lua vim.lsp.diagnostic.goto_next()<cr>

"DISABLE ARROW KEYS
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
