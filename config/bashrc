# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\
\[\033[01;32m\]\[\033[00m\]\[\033[01;34m\]\w\[\033[00m\] \$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\w \$ '
fi
unset color_prompt force_color_prompt

export EDITOR='nvim'
export VISUAL='nvim'
export BROWSER="/usr/bin/google-chrome-stable"

# ALIASES ######################################################################
alias g='git'
alias v='nvim'
alias ls='exa --color=always --group-directories-first'
alias la='exa -a --color=always --group-directories-first'
alias ll='exa -alF --color=always --group-directories-first'
alias l.='exa -a | egrep "^\."'
lt() {
    level=""
    if [ ! -z "$1" ]; then
        level="-L $1"
    fi
    exa -aT $level --color=always --group-directories-first $2
}

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ..='cd ..'
alias ~='cd ~'
alias rb='source ~/.bashrc'

alias sshs='eval `ssh-agent` && ssh-add'
alias sshq='kill $SSH_AGENT_PID'

#alias cp='cp -i'
alias mv='mv -i'
#alias rm='rm -I'
copy() { xclip -sel c < "$1"; }
paste() { xclip -o > "$1"; }

CISCO='/opt/cisco/anyconnect/bin/vpn'
alias auconnect='$CISCO -s connect remote.au.dk/AU-ACCESS'
alias audisconnect='$CISCO -s disconnect remote.au.dk/AU-ACCESS'
alias ciscostate='$CISCO state'
ciscovpn() { $CISCO "$@"; }

alaopa() {
	sed -i "s~background_opacity.*~background_opacity: $@~g" \
        .config/alacritty/alacritty.yml
}

pac() {
    PACS=$(pacman -Ssq | fzf -m --preview="pacman -Si {}")
    (($?)) || sudo pacman -Syy $PACS
}

bind '"\C-f":"of -h -E\n"'
alias godir='source godir'
bind '"\C-t":"source godir -h -E\n"'
cdn() { mkdir -p -- "$1" && cd -P -- "$1"; }

mvr() {
    unset -v latest
    for file in ~/{Downloads,Pictures}/*; do
      [[ $file -nt $latest ]] && latest=$file
    done
    mv -i "$latest" $([[ "${1##*/}" == *.* ]] \
        && echo "$1" || echo "$1.${latest##*.}")
}
 
ex () {
  if [ -f "$1" ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   unzstd $1    ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# GIT STUFF ####################################################################
MRCMD="mr -d /home/malte -i -n 2 -j6"
MRCMDS="mr -d /home/malte -n 2"

ci() { $MRCMDS record; }
st () { $MRCMD status; }

ciu() {
    eval `ssh-agent` && ssh-add
    $MRCMDS commit
    kill $SSH_AGENT_PID
}

fetch() {
    eval `ssh-agent` && ssh-add
    $MRCMD fetch
    kill $SSH_AGENT_PID
}

pull() {
    eval `ssh-agent` && ssh-add
    $MRCMD update
    kill $SSH_AGENT_PID
}

push() {
    eval `ssh-agent` && ssh-add
    $MRCMD push
    kill $SSH_AGENT_PID
}

