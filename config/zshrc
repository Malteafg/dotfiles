# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
unsetopt beep
bindkey -e
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/malte/.zshrc'

setopt HIST_IGNORE_ALL_DUPS
#setopt APPEND_HISTORY
#setopt INC_APPEND_HISTORY
setopt SHARE_HISTORY

autoload -Uz compinit
compinit
# End of lines added by compinstall

setopt NULL_GLOB
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

autoload -U promptinit && promptinit
setopt prompt_subst

# Enabling and setting git info var to be used in prompt config.
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git svn
# This line obtains information from the vcs.
zstyle ':vcs_info:git*' formats " (%b)"
precmd() {
    vcs_info
}

directory_name() {
    PROMPT_PATH=""
    if [[ -d $(git rev-parse --show-toplevel 2>/dev/null) ]]; then
        # We're in a git repo.
        BASE=$(basename $(git rev-parse --show-toplevel))
        if [[ $PWD = $(git rev-parse --show-toplevel) ]]; then
            # We're in the root.
            PROMPT_PATH="%F{127}${BASE}%f"
        else
            # We're not in the root. Display the git repo root.
            GIT_ROOT="%F{127}${BASE}%f"
            PATH_TO_CURRENT="%F{27}${PWD#$(git rev-parse --show-toplevel)}%f"
            PROMPT_PATH="${GIT_ROOT}${PATH_TO_CURRENT}"
        fi
    else
        PROMPT_PATH="%F{27}%~%f"
    fi

    echo "%B${PROMPT_PATH}%b"
}

PROMPT='$(directory_name)${vcs_info_msg_0_} %# '

. /usr/share/fzf/completion.zsh
. /usr/share/fzf/key-bindings.zsh

# ALIASES ######################################################################
alias g='git'
alias v='nvim'
alias sv='sudo -E nvim'
alias ls='exa --color=always --group-directories-first'
alias la='exa -a --color=always --group-directories-first'
alias l='exa -alF --color=always --group-directories-first'
alias l.='exa -a | egrep "^\."'
function lt() {
    level=""
    if [ ! -z "$1" ]; then
        level="-L $1"
    fi
    exa -aT $level --color=always --group-directories-first $2
}
function dirsize() { du -h --max-depth=1 $@ }

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

alias ..='cd ..'
alias ~='cd ~'
alias mv='mv -i'
function cdn() { mkdir -p -- "$1" && cd -P -- "$1"; }
alias rb='source ~/.zshrc'

alias sshs='eval `ssh-agent` && ssh-add'
alias sshq='kill $SSH_AGENT_PID'

# COMMANDS #####################################################################
function rmsp() { for f in "$@"; do mv "$f" "${f// /_}"; done }
function copy() { xclip -sel c < "$1"; }
function paste() { xclip -o > "$1"; }
function pac() {
    PACS=$(pacman -Ssq | fzf -m --preview="pacman -Si {}")
    (($?)) || sudo pacman -Syy $PACS
}

function mvr() {
    unset -v latest
    for file in ~/{Downloads,Pictures}/*; do
        latest=$file
        [[ $file -nt $latest ]] && latest=$file
    done
    mv -i "$latest" $([[ "${1##*/}" == *.* ]] \
        && echo "$1" || echo "$1.${latest##*.}")
}
 
function ex () {
  if [ -f "$1" ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   unzstd $1    ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# AU vpn
CISCO='/opt/cisco/anyconnect/bin/vpn'
alias auconnect='$CISCO -s connect remote.au.dk/AU-ACCESS'
alias audisconnect='$CISCO -s disconnect remote.au.dk/AU-ACCESS'
alias ciscostate='$CISCO state'
function ciscovpn() { $CISCO "$@"; }

# BINDINGS #####################################################################
bindkey -s '^t' 'of -he\n'
alias godir='source godir'
bindkey -s '^w' 'source godir -hed\n'

# GIT STUFF ####################################################################
MRCMD="mr -d $HOME -i -n 2 -j6"
MRCMDS="mr -d $HOME -n 2"

function ci() { $MRCMDS record }
function st() { $MRCMD status }
function ci() { mr -d $HOME -n 2 record }
function st() { mr -d $HOME -i -n 2 -j6 status }

function fetch() {
    eval `ssh-agent` && ssh-add
    mr -d $HOME -i -n 2 -j6 fetch
    kill $SSH_AGENT_PID
}

function pull() {
    eval `ssh-agent` && ssh-add
    mr -d $HOME -i -n 2 -j6 update
    kill $SSH_AGENT_PID
}

function push() {
    eval `ssh-agent` && ssh-add
    mr -d $HOME -i -n 2 -j6 push
    kill $SSH_AGENT_PID
}

# TEMPLATES ####################################################################
function mktex() {
    if [[ $# = 0 ]]; then
        echo "Enter name of project"
    else
        mkdir $1
        cp "$HOME/dotfiles/templates/latex.tex" "$1/main.tex"
    fi
}

function mkslides() {
    if [[ $# = 0 ]]; then
        echo "Enter name of project"
    else
        mkdir $1
        cp "$HOME/dotfiles/templates/slides.tex" "$1/main.tex"
    fi
}

# MISC #########################################################################
. "$HOME/.cargo/env"

bindkey '^[[1;5D' backward-word
bindkey '^[[1;5C' forward-word

# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -g -A key

key[Home]="${terminfo[khome]}"
key[End]="${terminfo[kend]}"
key[Insert]="${terminfo[kich1]}"
key[Backspace]="${terminfo[kbs]}"
key[Delete]="${terminfo[kdch1]}"
key[Up]="${terminfo[kcuu1]}"
key[Down]="${terminfo[kcud1]}"
key[Left]="${terminfo[kcub1]}"
key[Right]="${terminfo[kcuf1]}"
key[PageUp]="${terminfo[kpp]}"
key[PageDown]="${terminfo[knp]}"
key[Shift-Tab]="${terminfo[kcbt]}"

# setup key accordingly
[[ -n "${key[Home]}"      ]] && bindkey -- "${key[Home]}"       beginning-of-line
[[ -n "${key[End]}"       ]] && bindkey -- "${key[End]}"        end-of-line
[[ -n "${key[Insert]}"    ]] && bindkey -- "${key[Insert]}"     overwrite-mode
[[ -n "${key[Backspace]}" ]] && bindkey -- "${key[Backspace]}"  backward-delete-char
[[ -n "${key[Delete]}"    ]] && bindkey -- "${key[Delete]}"     delete-char
[[ -n "${key[Up]}"        ]] && bindkey -- "${key[Up]}"         up-line-or-history
[[ -n "${key[Down]}"      ]] && bindkey -- "${key[Down]}"       down-line-or-history
[[ -n "${key[Left]}"      ]] && bindkey -- "${key[Left]}"       backward-char
[[ -n "${key[Right]}"     ]] && bindkey -- "${key[Right]}"      forward-char
[[ -n "${key[PageUp]}"    ]] && bindkey -- "${key[PageUp]}"     beginning-of-buffer-or-history
[[ -n "${key[PageDown]}"  ]] && bindkey -- "${key[PageDown]}"   end-of-buffer-or-history
[[ -n "${key[Shift-Tab]}" ]] && bindkey -- "${key[Shift-Tab]}"  reverse-menu-complete

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} && ${+terminfo[rmkx]} )); then
	autoload -Uz add-zle-hook-widget
	function zle_application_mode_start { echoti smkx }
	function zle_application_mode_stop { echoti rmkx }
	add-zle-hook-widget -Uz zle-line-init zle_application_mode_start
	add-zle-hook-widget -Uz zle-line-finish zle_application_mode_stop
fi
